/// \file
/// \addtogroup Utils
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from utils.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <memory>
#include <string>
#include <vector>

namespace bnb { namespace interfaces {

class log_record_callback;
enum class hardware_class;
enum class severity_level;

class BNB_EXPORT utility_manager {
public:
    virtual ~utility_manager() {}

    static void initialize(const std::vector<std::string> & resource_paths, const std::string & client_token);

    static void release();

    /** Diagnostic crash. Use this to check you crash analytics systems.  */
    static void diagnostic_crash();

    /**
     * Get information about CPU capabilities. Mainly for usage on Android
     * @return JSON-string describing CPU capabilties
     */
    static std::string cpu_env();

    /**
     * Check device SoC class.
     * Only Android supported now, for other platforms always return hardware_class::high
     * @return hardware class of device
     */
    static hardware_class get_hardware_class();

    static void set_log_level(severity_level level);

    /**
     * Set callback to recieve log events from Banuba SDK.
     * @param cb Callback
     * @param lvl recieve logs with specified and higher levels
     */
    static void set_log_record_callback(const std::shared_ptr<log_record_callback> & cb, severity_level lvl);
};

} }  // namespace bnb::interfaces
/// @}

